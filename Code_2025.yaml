esphome:
  name: epaper_minimal
  on_boot:
    priority: -10
    then:
      - script.execute: update_screen

esp32:
  board: esp32dev
  framework:
    type: arduino

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.129.105
    gateway: 192.168.128.1
    subnet: 255.255.254.0
    dns1: 8.8.8.8
    
script:
  - id: update_screen
    then:
      - component.update: eink_display

time:
  - platform: sntp
    id: sntp_time
    timezone: "Europe/Brussels"
    on_time:
      # 07:00
      - seconds: 0
        minutes: 0
        hours: 7
        then:
          - script.execute: update_screen
      # 14:00
      - seconds: 0
        minutes: 0
        hours: 14
        then:
          - script.execute: update_screen
      # 16:00
      - seconds: 0
        minutes: 0
        hours: 16
        then:
          - script.execute: update_screen
      # 20:00
      - seconds: 0
        minutes: 0
        hours: 20
        then:
          - script.execute: update_screen
logger:
  level: DEBUG

api:

ota:
  platform: esphome  # <-- nécessaire maintenant

spi:
  clk_pin: 13
  mosi_pin: 14

font:
  ######### REGULAR ############
  - file: "epaper/GothamRnd-Book.ttf"
    id: book20
    size: 20
    glyphs: &font-glyphs
      ['!', '"', '%', '(', ')', '+', '=', ',', '-', '_', '.', ':', '°', ' ', '/', "'", "•", "&",
      '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
      'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
      'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
      'é', 'à', 'è', 'ç', 'ù', 'ö', 'É', 'À', 'È', 'Ç', 'Ù']
  - file: "epaper/GothamRnd-Book.ttf"
    id: book15
    size: 15
    glyphs : *font-glyphs 
  - file: "epaper/GothamRnd-Book.ttf"
    id: book12
    size: 12
    glyphs : *font-glyphs 
  ########## BOLD ############ 
  - file: "epaper/GothamRnd-Bold.ttf"
    id: bold15
    size: 15
    glyphs : *font-glyphs 
  - file: "epaper/GothamRnd-Bold.ttf"
    id: bold20
    size: 20
    glyphs : *font-glyphs 
  - file: "epaper/GothamRnd-Bold.ttf"
    id: bold25
    size: 25
    glyphs : *font-glyphs 
  - file: "epaper/GothamRnd-Bold.ttf"
    id: bold30
    size: 30
    glyphs : *font-glyphs 
  - file: "epaper/GothamRnd-Bold.ttf"
    id: bold35
    size: 35
    glyphs : *font-glyphs 
  - file: "epaper/GothamRnd-Bold.ttf"
    id: bold40
    size: 40
    glyphs : *font-glyphs 
  - file: "epaper/GothamRnd-Bold.ttf"
    id: bold50
    size: 50
    glyphs: ['.', '°', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'C', '-']

  - file: 'epaper/materialdesignicons-webfont.ttf'
    id: mdi100
    size: 100
    glyphs: &mdi-weather-glyphs
      - "\U000F0590" # mdi-weather-cloudy
      - "\U000F0F2F" # mdi-weather-cloudy-alert
      - "\U000F0E6E" # mdi-weather-cloudy-arrow-right
      - "\U000F0591" # mdi-weather-fog
      - "\U000F0592" # mdi-weather-hail
      - "\U000F0F30" # mdi-weather-hazy
      - "\U000F0898" # mdi-weather-hurricane
      - "\U000F0593" # mdi-weather-lightning
      - "\U000F067E" # mdi-weather-lightning-rainy
      - "\U000F0594" # mdi-weather-night
      - "\U000F0F31" # mdi-weather-night-partly-cloudy
      - "\U000F0595" # mdi-weather-partly-cloudy
      - "\U000F0F32" # mdi-weather-partly-lightning
      - "\U000F0F33" # mdi-weather-partly-rainy
      - "\U000F0F34" # mdi-weather-partly-snowy
      - "\U000F0F35" # mdi-weather-partly-snowy-rainy
      - "\U000F0596" # mdi-weather-pouring
      - "\U000F0597" # mdi-weather-rainy
      - "\U000F0598" # mdi-weather-snowy
      - "\U000F0F36" # mdi-weather-snowy-heavy
      - "\U000F067F" # mdi-weather-snowy-rainy
      - "\U000F0599" # mdi-weather-sunny
      - "\U000F0F37" # mdi-weather-sunny-alert
      - "\U000F14E4" # mdi-weather-sunny-off
      - "\U000F059A" # mdi-weather-sunset
      - "\U000F059B" # mdi-weather-sunset-down
      - "\U000F059C" # mdi-weather-sunset-up
      - "\U000F0F38" # mdi-weather-tornado
      - "\U000F059D" # mdi-weather-windy
      - "\U000F059E" # mdi-weather-windy-variant
      - "\U000F05F2" # mdi-food
      - "\U000F0A70" # mdi-silverware-fork-knife
      - "\U000F1A74" # mdi-solar-power-variant-outline
      - "\U000F1904" # mdi-home-lightning-bolt-outline
      - "\U000F0E0A" # mdi-water
      - "\U000F0A7A" # mdi-trash
      - "\U000F1A73" # mdi-solar-prod
      - "\U000F1A1B" # mdi-gas-burner
      - "\U000F140B" # mdi-energy
      - "\U000F0042" # mdi-arrow-left
      - "\U000F0043" # mdi-arrow-right
      - "\U000F1906" # mdi-leaf
      - "\U000F1363" # mdi-bottle-plastic
      - "\U000F03D6" # mdi-cardboard
      - "\U000F1873" # mdi-glass
      - "\U000F0EFA" # mdi-flood
      - "\U000F0199" # mdi-counters
      - "\U000F1B4C" # mdi-pills
      - "\U000F082D" # mdi-ladybug
      - "\U000F13DB" # mdi-bug-shield
      - "\U000F0391" # mdi-needle

  - file: 'epaper/materialdesignicons-webfont.ttf'
    id: mdi36
    size: 36
    glyphs: *mdi-weather-glyphs
  - file: 'epaper/materialdesignicons-webfont.ttf'
    id: mdi30
    size: 30
    glyphs: *mdi-weather-glyphs
  - file: 'epaper/materialdesignicons-webfont.ttf'
    id: mdi25
    size: 25
    glyphs: *mdi-weather-glyphs
    
sensor:
  - platform: homeassistant
    entity_id: sensor.mokip_outdoor_temperature
    id: weather_temperature_outside
  - platform: homeassistant
    entity_id: sensor.mokip_zone_zone_1_circuit_0_current_temperature
    id: weather_humidity_inside
  - platform: homeassistant
    entity_id: counter.compteur_de_vidage_du_puit
    id: compteur_vidage
  - platform: homeassistant
    entity_id: sensor.compteur_d_eau
    id: compteur_d_eau
  - platform: homeassistant
    entity_id: sensor.kiosk_fusion_solar_2025_0pi5kpb8ji7853vmxnvqzlzfkzi0qqur_total_current_day_energy
    id: prod_solaire_jour
  - platform: homeassistant
    entity_id: sensor.gazmeter_epaper_25
    id: gasmeter
  - platform: homeassistant
    entity_id: sensor.conso_generale_quotidienne_epaper_25
    id: conso_elec_quoti
  - platform: homeassistant
    entity_id: sensor.elec_epaper_25
    id: import_energie
  - platform: homeassistant
    entity_id: sensor.export_energie_epaper_25
    id: export_energie
  - platform: homeassistant
    entity_id: sensor.autoconsommation_epaper_25
    id: autoconsommation
  - platform: homeassistant
    entity_id: sensor.pourcentage_autoconso
    id: pourcentage_autoconso
  - platform: homeassistant
    entity_id: counter.anti_puce_knacki
    id: anti_puce_knacki
  - platform: homeassistant
    entity_id: counter.anti_puce_sushi
    id: anti_puce_sushi
  - platform: homeassistant
    entity_id: counter.anti_puce_pepita
    id: anti_puce_pepita
  - platform: homeassistant
    entity_id: counter.vermifuge_knacki
    id: vermifuge_knacki
  - platform: homeassistant
    entity_id: counter.vermifuge_sushi
    id: vermifuge_sushi
  - platform: homeassistant
    entity_id: counter.vermifuge_pepita
    id: vermifuge_pepita
  - platform: homeassistant
    entity_id: sensor.pont_a_celles_cloud_cover
    id: weather_cloud_cover
  - platform: homeassistant
    entity_id: sensor.pont_a_celles_daily_precipitation
    id: weather_precipitation
  - platform: homeassistant
    entity_id: sensor.pont_a_celles_humidity
    id: weather_humidity
  - platform: homeassistant
    entity_id: counter.vaccin_sushi
    id: vaccin_sushi
  - platform: homeassistant
    entity_id: counter.vaccin_pepita
    id: vaccin_pepita
  - platform: homeassistant
    entity_id: counter.vaccin_knacki
    id: vaccin_knacki

text_sensor: 
  - platform: homeassistant
    entity_id: sensor.date
    id: date_fr_complete
  - platform: homeassistant
    entity_id: sensor.mealie_today_name
    id: plat_du_jour
  - platform: homeassistant
    entity_id: sensor.papiers_cartons
    id: carton_date
  - platform: homeassistant
    entity_id: sensor.pmc
    id: pmc_date
  - platform: homeassistant
    entity_id: sensor.verre
    id: verre_date
  - platform: homeassistant
    entity_id: sensor.dechets_organiques
    id: dechets_organiques_date
  - platform: homeassistant
    entity_id: sensor.date_dernier_vidage_de_la_cave
    id: dernier_vidage
  - platform: homeassistant
    entity_id: sensor.pont_a_celles_daily_original_condition
    id: weather_daily_condition
  - platform: homeassistant
    entity_id: weather.pont_a_celles
    id: weather_condition


display:
  - platform: waveshare_epaper
    id: eink_display
    cs_pin: 15
    dc_pin: 27
    busy_pin: 25
    reset_pin: 26
    model: 7.50inV2
    rotation: 270° #Résolution écran 480x800
    update_interval: 500s
    lambda: |-
      // Tableau des jours en français
      const char* jours_fr[] = {"Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi"};
      auto time = id(sntp_time).now();
      if (time.is_valid()) {
        int idx = (time.day_of_week + 6) % 7;  // décale d’un cran en arrière
      char buffer[40];
      snprintf(buffer, sizeof(buffer), "%s %02d-%02d-%04d",
        jours_fr[idx],
        time.day_of_month,
        time.month,
        time.year);
      it.printf(240, 15, id(bold35), TextAlign::TOP_CENTER, "%s", buffer);
      }
      it.filled_rectangle(50, 50, 400, 3); // ligne horizontale 
      it.print(155, 60, id(mdi36), TextAlign::TOP_CENTER, "\U000F05F2"); // picto food
      it.printf(245, 70, id(bold20), TextAlign::TOP_CENTER, "Plat du jour :"); //titre
      it.printf(240, 95, id(book20), TextAlign::TOP_CENTER, "%s", id(plat_du_jour).state.c_str());
      it.filled_rectangle(50, 125, 380, 2);
      // Icônes météo mappées aux conditions
      std::map<std::string, std::string> weather_icon_map {
      {"sunny", "\U000F0599"},
      {"cloudy", "\U000F0590"},
      {"partlycloudy", "\U000F0595"},
      {"rainy", "\U000F0597"},
      {"pouring", "\U000F0596"},
      {"lightning", "\U000F0593"},
      {"lightning-rainy", "\U000F067E"},
      {"fog", "\U000F0591"},
      {"snowy", "\U000F0598"},
      {"windy", "\U000F059D"},
      };

      // Récupère la condition météo (text_sensor -> string)
      std::string condition = id(weather_condition).state.c_str();

      it.print(35, 130, id(mdi100), TextAlign::TOP_LEFT, weather_icon_map[condition].c_str());
      it.printf(35, 220, id(bold50), TextAlign::TOP_LEFT, "%.1f°C", id(weather_temperature_outside).state);

      // Détails météo
      it.printf(220, 135, id(book20), TextAlign::TOP_LEFT, "%s", id(weather_daily_condition).state.c_str());
      it.printf(220, 155, id(book15), TextAlign::TOP_LEFT, "Nuages %.0f%% • Pluie %.1fmm",
       id(weather_cloud_cover).state,
       id(weather_precipitation).state);
      it.printf(220, 170, id(book15), TextAlign::TOP_LEFT, "Humidité %.0f%%", id(weather_humidity).state);

      it.filled_rectangle(50, 260, 380, 2);
      it.print(137, 270, id(mdi36), TextAlign::TOP_CENTER, "\U000F1B4C"); // picto pills 
      it.printf(245, 280, id(bold20), TextAlign::TOP_CENTER, "Antiparasitaires :"); //titre
      it.print(287, 308, id(mdi25), TextAlign::TOP_CENTER, "\U000F13DB"); //picto antipuces
      it.print(332, 308, id(mdi25), TextAlign::TOP_CENTER, "\U000F082D"); //picto vermifuge
      it.print(380, 308, id(mdi25), TextAlign::TOP_CENTER, "\U000F0391"); //picto vaccin
      it.filled_rectangle(80, 335, 320, 1); // tableau ligne du haut
      it.filled_rectangle(80, 355, 320, 1); // tableau ligne inter horizontale 1
      it.filled_rectangle(80, 375, 320, 1); // tableau ligne inter horizontale 2
      it.filled_rectangle(80, 395, 320, 1); // tableau ligne du bas
      it.filled_rectangle(80, 335, 1, 60); // tableau ligne cadre ext gauche
      it.filled_rectangle(265, 315, 1, 80); // tableau ligne vert inter 1
      it.filled_rectangle(310, 315, 1, 80); // tableau ligne vert inter 2
      it.filled_rectangle(355, 315, 1, 80); // tableau ligne vert inter 3
      it.filled_rectangle(400, 315, 1, 80); // tableau ligne cadre ext droite
      it.printf(85, 340, id(bold15), TextAlign::TOP_LEFT, "Sushi");
      it.printf(85, 360, id(bold15), TextAlign::TOP_LEFT, "Pepita");
      it.printf(85, 380, id(bold15), TextAlign::TOP_LEFT, "Knacki");
      it.printf(287, 340, id(book15), TextAlign::TOP_CENTER, "%.0f", id(anti_puce_sushi).state);
      it.printf(332, 340, id(book15), TextAlign::TOP_CENTER, "%.0f", id(vermifuge_sushi).state);
      it.printf(380, 340, id(book15), TextAlign::TOP_CENTER, "%.0f", id(vaccin_sushi).state);
      it.printf(287, 360, id(book15), TextAlign::TOP_CENTER, "%.0f", id(anti_puce_pepita).state);
      it.printf(332, 360, id(book15), TextAlign::TOP_CENTER, "%.0f", id(vermifuge_pepita).state);
      it.printf(380, 360, id(book15), TextAlign::TOP_CENTER, "%.0f", id(vaccin_pepita).state);
      it.printf(287, 380, id(book15), TextAlign::TOP_CENTER, "%.0f", id(anti_puce_knacki).state);
      it.printf(332, 380, id(book15), TextAlign::TOP_CENTER, "%.0f", id(vermifuge_knacki).state);
      it.printf(380, 380, id(book15), TextAlign::TOP_CENTER, "%.0f", id(vaccin_knacki).state);
      it.filled_rectangle(50, 405, 380, 2);
      it.print(94, 415, id(mdi36), TextAlign::TOP_CENTER, "\U000F0A7A"); // picto poubelle
      it.printf(240, 425, id(bold20), TextAlign::TOP_CENTER, "Ramassage des déchets :"); //titre
      it.print(40, 448, id(mdi30), TextAlign::TOP_CENTER, "\U000F1906"); //picto leaf
      it.print(40, 483, id(mdi30), TextAlign::TOP_CENTER, "\U000F1363"); //picto bottle plastic
      it.print(275, 448, id(mdi30), TextAlign::TOP_CENTER, "\U000F03D6"); //picto cardboard
      it.print(275, 483, id(mdi30), TextAlign::TOP_CENTER, "\U000F1873"); //picto glass
      it.printf(70, 456, id(book20), TextAlign::TOP_LEFT, "%s", id(dechets_organiques_date).state.c_str()); //organique
      it.printf(70, 490, id(book20), TextAlign::TOP_LEFT, "%s", id(pmc_date).state.c_str()); //pmc
      it.printf(305, 456, id(book20), TextAlign::TOP_LEFT, "%s", id(carton_date).state.c_str()); //carton
      it.printf(305, 490, id(book20), TextAlign::TOP_LEFT, "%s", id(verre_date).state.c_str()); //verre
      it.filled_rectangle(50, 530, 380, 2); // ligne horizontale 
      it.print(53, 540, id(mdi36), TextAlign::TOP_CENTER, "\U000F0199"); // picto compteurs
      it.printf(240, 550, id(bold20), TextAlign::TOP_CENTER, "Consommations et prod solaire :"); //titre
      it.printf(50, 585, id(book20), TextAlign::TOP_LEFT, "%.1f litres", id(compteur_d_eau).state);
      it.print(20, 578, id(mdi30), TextAlign::TOP_CENTER, "\U000F0E0A"); //picto eau
      it.printf(50, 616, id(book20), TextAlign::TOP_LEFT, "%.1f m3", id(gasmeter).state);
      it.print(20, 609, id(mdi30), TextAlign::TOP_CENTER, "\U000F1A1B"); //picto gaz
      it.printf(50, 647, id(book20), TextAlign::TOP_LEFT, "%.1f kWh", id(conso_elec_quoti).state);
      it.print(20, 642, id(mdi30), TextAlign::TOP_CENTER, "\U000F140B"); //picto conso elec
      it.printf(50, 670, id(bold15), TextAlign::TOP_LEFT, "%.1f%%", id(pourcentage_autoconso).state);
      it.printf(96, 671, id(book12), TextAlign::TOP_LEFT, "d'autosuffisance");
      it.filled_rectangle(240, 575, 2, 120); // ligne verticale pour le tableau
      it.print(355, 567, id(mdi36), TextAlign::TOP_CENTER, "\U000F1A73"); //picto prod solaire
      it.printf(315, 607, id(book20), TextAlign::TOP_LEFT, "%.1f kWh", id(prod_solaire_jour).state);
      it.print(330, 620, id(mdi30), TextAlign::TOP_CENTER, "\U000F0042");  //picto gauche
      it.print(370, 620, id(mdi30), TextAlign::TOP_CENTER, "\U000F0043"); //picto droite
      it.printf(265, 655, id(book20), TextAlign::TOP_LEFT, "%.1f kWh", id(autoconsommation).state);
      it.printf(370, 655, id(book20), TextAlign::TOP_LEFT, "%.1f kWh", id(export_energie).state);
      it.printf(262, 675, id(book12), TextAlign::TOP_LEFT, "autoconsommés");
      it.printf(378, 675, id(book12), TextAlign::TOP_LEFT, "renvoyés");
      it.filled_rectangle(50, 695, 380, 2); // ligne horizontale qui ferme le tableau
      it.print(120, 705, id(mdi36), TextAlign::TOP_CENTER, "\U000F0EFA"); //picto innondation
      it.printf(240, 715, id(bold20), TextAlign::TOP_CENTER, "Puisard de la cave :"); //titre
      it.printf(240, 740, id(book20), TextAlign::TOP_CENTER, "Vidage aujourd'hui : %d", (int)id(compteur_vidage).state);
      it.printf(240, 764, id(book12), TextAlign::TOP_CENTER, "Dernier vidage : %s", id(dernier_vidage).state.c_str());
      it.printf(250, 787, id(bold15), TextAlign::TOP_RIGHT, "Infos mises à jour : ");
      it.strftime(255, 787, id(bold15), TextAlign::TOP_LEFT, "%d-%m-%Y %H:%M", id(sntp_time).now());